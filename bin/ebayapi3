#!/usr/bin/env perl

use strict;
use warnings;

package bin::ebayapi3;

use Dispatch::Fu;
use JSON qw/to_json from_json/;
use eBay::Client::OpenAPI3;
use Util::H2O::More qw/ddd Getopt2h2o h2o o2h o2d/;
use URI             qw/query_form/;
use YAML            qw//;

binmode(STDOUT, ":encoding(UTF-8)");

use constant {
    ERROR_SUCCESS => 0,
    ERROR_FATAL   => 1,
    CONFIG        => sprintf( qq{%s/%s}, ( getpwuid $< )[7], qq{.ebayapi3.conf} ),
    MAX_TOTAL     => 10_000, #per documentation
};

my $subcommand = shift @ARGV;
my $o          = { config => CONFIG, debug => undef, limit => 200, offset => 0, sort => q{endingSoonest}, verbose => undef };

if (not caller) {
  my $exit = dispatch {
      my $input_ref = shift;
      my ( $subcommand, $ARGV_ref, $o ) = @$input_ref;
      xdefault $subcommand, q{oauth2};
  }
  [ $subcommand, \@ARGV, $o ],
  on browse => \&browse,
  on help   => \&show_help,
  on oauth2 => \&oauth2;
  exit $exit;
}

sub show_help {
    print STDERR <<EOHELP;
 ... print help section
EOHELP
    return ERROR_FATAL;
}

sub browse {
    my $input_ref = shift;
    my ( $subcommand, $ARGV_ref, $o ) = @$input_ref;
    Getopt2h2o $ARGV_ref, $o, qw/as=s buyopt=s@ category_ids=s continue limit=i max=i nextcmd offset=i sort=i stats/;

    my $ec = eBay::Client::OpenAPI3->new( config => $o->config );
    my ($total, $gotten, $num_requests, $request_count);

  GETITEMS:
    {
        $o->buyopt([qw/AUCTION/]) if not $o->buyopt;
        my $buyingOptions = join q{|}, @{$o->buyopt};
        my $filter = sprintf qq/buyingOptions:{%s}/, $buyingOptions;
        my $ref = $ec->oauth2->browse( filter => $filter, category_ids => $o->category_ids, limit => $o->limit, offset => $o->offset, sort => $o->sort );

        # set before first results are in
        if (not $total) {
          $total        = $o->max // $ref->total;
          die qq{FATAL: total not set, something is wrong!\n} if not $total;
          $total = ($total < MAX_TOTAL) ? $total : MAX_TOTAL; # limit set above, based on eBay docs 
          $num_requests = int $total / $o->limit;
          $o->max($total);
        }

        $gotten += $o->limit;

        ++$request_count;
        printf STDERR qq{% 2d/%d requests, % 5d/%d items gotten ...\n}, $request_count, $num_requests, $gotten, $total if $o->stats;

        if ($o->max and $o->max < $gotten) {
          printf STDERR qq{fetch shutting down, number got exceeded max set with, "--max %d"\n}, $o->max;
          exit;
        }

        if ( $o->as and $o->as eq q{json} ) {
            my $_ref = o2d $ref;
            my $json = to_json $_ref;
            print $json;
        }
        else {
            my $_ref = o2d $ref;
            my $yaml = YAML::Dump($ref);
            print $yaml;
        }

        # parse out query params in the 'next' field, (next URL with updated pagination details)
        my (@query) = split /[?&]/, $ec->next;
        my $url     = shift @query;
        my %params  = map { split /=/, $_ } @query;
        my $p       = h2o \%params;

        # output "next" command to STDERR, maybe can be used to script an external looping...
        printf STDERR qq{./bin/ebayapi3 browse --offset %s --limit %s --sort %s --category_ids %s --as yaml --continue\n}, $p->offset, $p->limit, $p->sort, $p->category_ids if $o->nextcmd;

        # run again, with the updated pagination parameters
        if ( $o->continue ) {
            $o->offset( $p->offset );
            $o->limit( $p->limit );
            goto GETITEMS;
        }
    }

    return ERROR_SUCCESS;
}

# TODO: implementat "--as yaml" and "--as ini"
sub oauth2 {
    my $input_ref = shift;
    my ( $subcommand, $ARGV_ref, $o ) = @$input_ref;
    Getopt2h2o $ARGV_ref, $o, qw/as=s/;
    my $ec = eBay::Client::OpenAPI3->new( config => $o->config );
    $ec->oauth2;
    if ( $o->as and $o->as eq q{json} ) {
        print to_json o2h $ec->token;
    }
    elsif ( $o->as and $o->as eq q{yaml} ) {

    }
    elsif ( $o->as and $o->as eq q{ini} ) {

    }
    print $ec->token->access_token;
    return ERROR_SUCCESS;
}

__END__

=head1 NAME ebayapi3 - a commandline client using Perl's eBay::Client::OpenAPI3

=head1 SYNOPSIS

  ./bin/ebayapi3 browse --limit 200 --category_ids 13885 --stats --continue >
  latest.yaml

=head1 DESCRIPTION

This is an unambitious client for the  eBay OpenAPI 3.0 client that exposes some
of what's in L<eBay::Client::OpenAPI3> for commandline use.

It implements subcommands, but there are only 2 that are currently available:
I<browse> and I<oauth>.

=head2 USAGE

B<Note:> the default output is in YAML. The reason for this is because it is
easier to dump seperate I<documents> (here, eBay result sets) to the same file
due ti the use of the C<---> separator. If the same thing was attempted with
JSON, it would be an invalid file of isolated JSON objects listed one right
after the other. If you really want to output in JSON, look at the C<--as json>
flag.

=head2 C<ebay3cli oauth2>

=head2 C<ebay3cli browse>

=head1 ENVIRONMENT

By default, this utility looks for configuration details in C<~/.ebayapi3.conf>,
and expects valid information in the following INI structure:

  [eBay]
  client_id            = something-SLUG-PRO-dead-beef-4567
  client_secret        = PRD-dead-beef-1234
  affiliateCampaignId  = someinteger 
  affiliateReferenceId =  notsurewhatthislookslike

=head1 BUGS & SUPPORT REQUESTS

Please report bugs on Github.

L<< https://github.com/oodler577/p5-eBay-Client-OpenAPI3/issues >>

The author of this utlity and module may be contracted for very reasonable rates
by anyone wishing to significantly extend it or the underlying module - provided
the changes may be incorporated into the public version of this module. Please
email the author at the email listed below if interested.

=head1 AUTHOR

Oodler 577 L<< <oodler@cpan.org> >>

=head1 LICENSE & COPYRIGHT

Same as Perl/C<perl>.
