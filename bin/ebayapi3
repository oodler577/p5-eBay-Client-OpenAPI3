#!/usr/bin/env perl

use strict;
use warnings;

package bin::ebayapi3;

use FindBin qw/$Bin/;
use lib qq{$Bin/../lib};
use JSON::XS             qw/encode_json decode_json/;
use Util::H2O::More      qw/ddd Getopt2h2o h2o o2h o2d/;
use URI                  qw/query_form/;
use YAML                 qw//;
use eBay::Client::OpenAPI3;
use Dispatch::Fu;
use Text::ASCII::Convert qw/convert_to_ascii/;
use POSIX qw/ceil/;

#binmode( STDOUT, ":encoding(UTF-8)" );
binmode STDOUT;

use constant {
    EXIT_SUCCESS => 0,
    EXIT_FATAL   => 1,
    CONFIG        => sprintf( qq{%s/%s}, ( getpwuid $< )[7], qq{.ebayapi3.conf} ),
    MAX_TOTAL     => 10_000,                                                    #per documentation
};

my $subcommand = shift @ARGV;
my $o          = { config => CONFIG, debug => undef, limit => 200, offset => 0, sort => q{endingSoonest}, verbose => undef };

if ( not caller ) {
#<<<
  my $exit = dispatch {
      my $input_ref = shift;
      my ( $subcommand, $ARGV_ref, $o ) = @$input_ref;
      xdefault $subcommand, q{oauth2};
  }
  [ $subcommand, \@ARGV, $o ],
  on browse => \&browse,
  on help   => \&show_help,
  on item   => \&get_item,
  on oauth2 => \&oauth2,
  on rate   => \&rate_limit,
  ;
#>>>
    exit $exit;
}

# TODO - add help output and USAGE info in POD ..!!!!!!!!!!!!!

sub show_help {
    print STDERR <<EOHELP;
ebayapi3 Client

Each subcommand has it's own options.

Subcommand: 'help'  - prints this help text

 Example:

   ebayapi3 help

Subcommand: 'oauth' - creates a new, valid OAuth token

 Example:

   ebayapi3 oauth

Subcommand: 'browse' - returns a list of items in the specified category(s)

 Example:

   ebayapi3 browse --limit 200 --category_ids 13885 --stats --as json

 Options:
   --as=s             json, compactjson, ascii
   --buyopt=s@        passed to API URL query string
   --category_ids=s   item categories to grab
   --continue         run again, with the updated pagination parameters
   --limit=i          enforces a limit
   --max=i            bound number of results
   --nextcmd
   --offset=i         paginatino controller
   --sort=i           API sort parameter
   --stats            reports iteration and item count via STDERR

Subcommand: 'item' - dumps the JSON for the specified item id

  Example

    ebayapi3 item --itemid 21323232123 --as json

  Options:
    --itemid          eBay item id, internally converts it to the "legacy" format
    --as              json, compactjson, summary

Subcommand: 'rate' - dumps the JSON for the calling rate quota

  Example

    ebayapi3 rate --as json

  Options:
    --as              json, compactjson, summary

Author:

Brett Estrade <oodler\@cpan.org>, <brett\@acutisdata.com>

Support Statement:

This client is meant to serve the needs of those who use it, if
a feature you want is not here; let me know, and we'll work something
out.
  
EOHELP
    return EXIT_FATAL;
}

sub oauth2 { my $input_ref = shift;
    my ( $subcommand, $ARGV_ref, $o ) = @$input_ref;
    Getopt2h2o $ARGV_ref, $o, qw/as=s/;
    my $ec = eBay::Client::OpenAPI3->new( config => $o->config );
    $ec->oauth2;
    if ( $o->as and $o->as eq q{json} ) {
        print encode_json o2h $ec->token;
    }
    print $ec->token->access_token;
    return EXIT_SUCCESS;
}

sub rate_limit {
    my $input_ref = shift;
    my ( $subcommand, $ARGV_ref, $o ) = @$input_ref;
    Getopt2h2o $ARGV_ref, $o, qw/as=s/;

    my $ec = eBay::Client::OpenAPI3->new( config => $o->config );

    local $@;
    my $ref = eval { $ec->oauth2->rate_limit( api_name => "browse" ) } or undef;
    if ($@) {
       warn sprintf "FATAL: eBay 'rate_limit' (developer/analytics/v1_beta/rate_limit?api_name=browse) API Error, %s", $@;
       exit EXIT_FATAL;
    }

#<<<
   dispatch {
     my $input_ref = shift;
     my ($o, $ref) = @$input_ref;
     xdefault $o->as, q{json};
   } [ $o, $ref ],
   on compactjson => sub {
     my $input_ref = shift;
     my ($o, $ref) = @$input_ref;
     my $coder = JSON::XS->new->utf8;
     print $coder->encode(o2d $ref);
   },
   on json => sub {
     my $input_ref = shift;
     my ($o, $ref) = @$input_ref;
     my $coder = JSON::XS->new->utf8->pretty;
     print $coder->encode(o2d $ref);
   },
   on summary => sub {
     my $input_ref = shift;
     my ($o, $ref) = @$input_ref;
     my $format = <<EOF;
%s API Call Rates
Limit:  %s
Used :  %s
Left :  %s
Reset:  %s
Period: %s
EOF
     my $info = $ref->rateLimits->get(0)->resources->get(0);
     my $rates = $info->rates->get(0);
     printf $format, $info->name, $rates->limit, $rates->count, $rates->remaining, $rates->reset, $rates->timeWindow;
   },
   ;
#>>>

  return EXIT_SUCCESS;
}

sub get_item {
    my $input_ref = shift;
    my ( $subcommand, $ARGV_ref, $o ) = @$input_ref;
    Getopt2h2o $ARGV_ref, $o, qw/as=s itemid=i/;

    my $ec = eBay::Client::OpenAPI3->new( config => $o->config );

    local $@;
    my $ref = eval { $ec->oauth2->getItem( itemid => $o->itemid ) } or undef;
    if ($@) {
       warn sprintf "FATAL: eBay 'getItem' (buy/browse/v1/item) API Error, %s", $@;
       exit EXIT_FATAL;
    }

#<<<
   dispatch {
     my $input_ref = shift;
     my ($o, $ref) = @$input_ref;
     xdefault $o->as, q{json};
   } [ $o, $ref ],
   on compactjson => sub {
     my $input_ref = shift;
     my ($o, $ref) = @$input_ref;
     $ref->title(convert_to_ascii($ref->title));
     my $coder = JSON::XS->new->utf8;
     my $ascii = $coder->encode(o2d $ref);
     print $ascii;
   },
   on json => sub {
     my $input_ref = shift;
     my ($o, $ref) = @$input_ref;
     $ref->title(convert_to_ascii($ref->title));
     my $coder = JSON::XS->new->utf8->pretty;
     my $ascii = $coder->encode(o2d $ref);
     print $ascii;
   },
   on summary => sub {
     my $input_ref = shift;
     my ($o, $ref) = @$input_ref;
     $ref->title(convert_to_ascii($ref->title));
     $ref->itemId((split(/\|/, $ref->itemId))[1]); # extracts actual itemId out of the "v1|ITEMID|0" legacy format
     my $format = <<EOF;
%s Title: %s
Bids: %s
Price: %s (%s)
EOF
     printf $format, $ref->itemId, $ref->title, $ref->bidCount, $ref->price->value, $ref->price->currency;
   },
   ;
#>>>

  return EXIT_SUCCESS;
}

sub browse {
    my $input_ref = shift;
    my ( $subcommand, $ARGV_ref, $o ) = @$input_ref;
    Getopt2h2o $ARGV_ref, $o, qw/as=s brand=s@ buyopt=s@ category_ids=s continue limit=i max=i nextcmd offset=i sort=i stats/;

    my $ec = eBay::Client::OpenAPI3->new( config => $o->config );
    my ( $total, $gotten, $num_requests, $request_count );

  GETITEMS:
    {
        $o->buyopt( [qw/AUCTION/] ) if not $o->buyopt;
        my $buyingOptions = join q{|}, @{ $o->buyopt };
        my $filter        = sprintf qq/buyingOptions:{%s}/, $buyingOptions;

        # add 1 or more brands to the filter
        if ($o->brand) {
          my $brands      = join(q{|}, map { qq/"$_"/ } @{ $o->brand  }); # need to wrap brands in quotes
          $filter         = sprintf qq/brand:{%s},%s/, $brands, $filter;
        }

        local $@;
        my $ref           = eval { $ec->oauth2->browse( filter => $filter, category_ids => $o->category_ids, limit => $o->limit, offset => $o->offset, sort => $o->sort ) } or undef ;
        # handle error; array reference, $ref->{errors}->{all} is expected to exist
        if ($@) {
          warn sprintf "FATAL: eBay 'browse' (item_summary/search) API Error, %s", $@;
          exit EXIT_FATAL;
        }

        foreach my $warning ($ref->warnings->all) {
          warn sprintf "API WARNING: %s\n", $warning->message;
        }

        # set before first results are in
        $total = $o->max // $ref->total;
        $total        = ( $total < MAX_TOTAL ) ? $total : MAX_TOTAL;    # limit set above, based on eBay docs
        $num_requests = ceil($total / $o->limit);
        $o->max($total);

        $gotten += ($total > $o->limit) ? $o->limit : $total;

        ++$request_count;

        printf STDERR qq{%02d/%02d requests, %05d/%02d items gotten ...\n}, $request_count, $num_requests, $gotten, $total if $o->stats;

        if ( $o->max and $o->max < $gotten ) {
            printf STDERR qq{fetch shutting down, number got exceeded max set with, "--max %d"\n}, $o->max;
            exit;
        }

#<<<    
        # handle output options
        dispatch {
          my $input_ref = shift;
          my ($o, $ref) = @$input_ref;
          xdefault $o->as, q{json};
        } [ $o, $ref ],
        on yaml => sub {
          my $input_ref = shift;
          my ($o, $ref) = @$input_ref;
          my $_ref = o2d $ref;
          my $yaml = YAML::Dump($_ref);
          print $yaml;
        },
        on json => sub {
          my $input_ref = shift;
          my ($o, $ref) = @$input_ref;
          foreach my $item ($ref->itemSummaries->all) {
            my $title = $item->title;
            $item->title(convert_to_ascii($title));
          }
          my $coder = JSON::XS->new->utf8->pretty;
          my $ascii = $coder->encode(o2d $ref);
          print $ascii;
        },
        on compactjson => sub {
          my $input_ref = shift;
          my ($o, $ref) = @$input_ref;
          foreach my $item ($ref->itemSummaries->all) {
            my $title = $item->title;
            $item->title(convert_to_ascii($title));
          }
          my $coder = JSON::XS->new->utf8;
          my $ascii = $coder->encode(o2d $ref);
          print $ascii;
        };
#>>>

        # run again, with the updated pagination parameters
        if ( $o->continue and $ec->next ) {
           # parse out query params in the 'next' field, (next URL with updated pagination details)
           my (@query) = split /[?&]/, $ec->next;
           my $url     = shift @query;
           my %params  = map { split /=/, $_ } @query;
           my $p       = h2o \%params;

           # output "next" command to STDERR, maybe can be used to script an external looping...
           printf STDERR qq{./bin/ebayapi3 browse --offset %s --limit %s --sort %s --category_ids %s --as yaml --continue\n}, $p->offset, $p->limit, $p->sort, $p->category_ids if $o->nextcmd;

           $o->offset( $p->offset );
           $o->limit( $p->limit );
           goto GETITEMS;
        }
    }

    return EXIT_SUCCESS;
}

__END__

=head1 NAME ebayapi3 - a commandline client using Perl's eBay::Client::OpenAPI3

=head1 SYNOPSIS

  ./bin/ebayapi3 browse --limit 200 --category_ids 13885 --stats --continue >
  latest.yaml

=head1 DESCRIPTION

This is an unambitious client for the  eBay OpenAPI 3.0 client that exposes some
of what's in L<eBay::Client::OpenAPI3> for commandline use.

It implements subcommands, but there are only 2 that are currently available:
I<browse> and I<oauth>.

=head2 USAGE

B<Note:> the default output is in YAML. The reason for this is because it is
easier to dump seperate I<documents> (here, eBay result sets) to the same file
due ti the use of the C<---> separator. If the same thing was attempted with
JSON, it would be an invalid file of isolated JSON objects listed one right
after the other. If you really want to output in JSON, look at the C<--as json>
flag.

=head2 C<ebayapi3 oauth2>

Dumps a new OAuth token needed for making API calls.

=head2 C<ebayapi3 browse>

Dumps JSON for a list of items in 1 or more specifieced categories, run
C<ebayapi3 help> for more info and examples.

=head2 C<ebayapi3 item>

Dumps JSON for a specific item, run C<ebayapi3 help> for more info and examples.

=head2 C<ebayapi3 rate>

Dumps JSON for the the APIs used in this tool, namely C<browse>.

=head1 ENVIRONMENT

By default, this utility looks for configuration details in C<~/.ebayapi3.conf>,
and expects valid information in the following INI structure:

  [eBay]
  client_id            = something-SLUG-PRO-dead-beef-4567
  client_secret        = PRD-dead-beef-1234
  affiliateCampaignId  = someinteger 
  affiliateReferenceId =  notsurewhatthislookslike

=head1 BUGS & SUPPORT REQUESTS

Please report bugs on Github.

L<< https://github.com/oodler577/p5-eBay-Client-OpenAPI3/issues >>

The author of this utlity and module may be contracted for very reasonable rates
by anyone wishing to significantly extend it or the underlying module - provided
the changes may be incorporated into the public version of this module. Please
email the author at the email listed below if interested.

=head1 AUTHOR

Oodler 577 L<< <oodler@cpan.org> >>

=head1 LICENSE & COPYRIGHT

Same as Perl/C<perl>.
